ROSTemplateFormatVersion: '2015-09-01'
Transform: 'Aliyun::Serverless-2018-04-03'
Resources:
  weather-fc-demo: # service name
    Type: 'Aliyun::Serverless::Service'
    Properties:
      Description: 'The fc demo of realtime weather query'
      InternetAccess: true
      Policies:
        - AliyunOTSReadOnlyAccess
        - AliyunOTSWriteOnlyAccess
      {{ if $USING_VPC }}
      VpcConfig:
        VpcId: {{ $VPC_ID }}
        {{ $switches := split "," $VPC_SWITCH_IDS }}
        VSwitchIds: [ {{ range $index, $switch := $switches }} {{ if gt $index 0 }} , {{ end }} '{{ $switch }}' {{ end }} ]
        SecurityGroupId: {{ $SECURITY_GROUP_ID }}
      {{ end }}
      {{ if $USING_LOG }}
      LogConfig:
        Project: {{ $LOG_PROJECT }}
        Logstore: {{ $LOG_STORE }}
      {{ end }}
    weather-query: # function name
      Type: 'Aliyun::Serverless::Function'
      Properties:
        Initializer: com.github.zxkane.aliyunfc.demo.Weather::initialize
        Handler: com.github.zxkane.aliyunfc.demo.Weather::handleRequest
        Runtime: java8
        Description: 'Weather query'
        MemorySize: 192
        InitializationTimeout: 3
        Timeout: 10
        CodeUri: './build/libs/aliyun-fc-demo-1.0.0-SNAPSHOT-all.jar'
        EnvironmentVariables:
          DTS_ENDPOINT: {{ $DTS_ENDPOINT }}
          DTS_INSTANCE_NAME: {{ $DTS_INSTANCE_NAME }}
    weather-fetch: # function name
      Type: 'Aliyun::Serverless::Function'
      Properties:
        Initializer: com.github.zxkane.aliyunfc.demo.WeatherFetch::initialize
        Handler: com.github.zxkane.aliyunfc.demo.WeatherFetch::handleRequest
        Runtime: java8
        Description: 'Weather query'
        MemorySize: 192
        InitializationTimeout: 3
        Timeout: 10
        CodeUri: './build/libs/aliyun-fc-demo-1.0.0-SNAPSHOT-all.jar'
        EnvironmentVariables:
          DTS_ENDPOINT: {{ $DTS_ENDPOINT }}
          DTS_INSTANCE_NAME: {{ $DTS_INSTANCE_NAME }}
      Events:
        TmTrigger:
          Type: Timer
          Properties:
            Payload: "fetch-weather"
            CronExpression: "0 */5 * * * *"  # 每5分钟
            Enable: true
  weather_gateway: # Api Group
    Type: 'Aliyun::Serverless::Api'
    Properties:
      StageName: RELEASE
      DefinitionBody:
        '/weather':
          get:
            x-aliyun-apigateway-api-name: weather_query
            x-aliyun-apigateway-request-config:
              requestProtocol: "HTTP"
              requestMode: "MAPPING"
              bodyFormat: "STREAM"
            x-aliyun-apigateway-request-parameters:
              - apiParameterName: 'city'
                location: 'Query'
                parameterType: 'String'
                required: 'REQUIRED'
            x-aliyun-apigateway-fc:
              arn: acs:fc:::services/${weather-fc-demo.Arn}/functions/${weather-query.Arn}/
              timeout: 13000
  {{ $DTS_INSTANCE_NAME }}:
    Type: 'Aliyun::Serverless::TableStore'
    Properties:
      ClusterType: HYBRID
      Description: historical weather records
    weather:
      Type: 'Aliyun::Serverless::TableStore::Table'
      Properties:
        PrimaryKeyList:
          - Name: city
            Type: STRING
  {{ if $USING_LOG }}
  {{ $LOG_PROJECT }}:
    Type: 'Aliyun::Serverless::Log'
    Properties:
      Description: 'log project for aliyun fc demo'
    {{ $LOG_STORE }}:
      Type: 'Aliyun::Serverless::Log::Logstore'
      Properties:
        TTL: 10
        ShardCount: 1
  {{ end }}
